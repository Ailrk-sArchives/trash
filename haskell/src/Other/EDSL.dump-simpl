
==================== Tidy Core ====================
2021-05-22 07:41:27.629540336 UTC

Result size of Tidy Core
  = {terms: 382, types: 172, coercions: 4, joins: 0/7}

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cfromInteger_r1J0q :: Integer -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cfromInteger_r1J0q
  = \ (n_a1O1z :: Integer) ->
      break<7>(n_a1O1z) Other.EDSL.Lit n_a1O1z

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP_r1O6U :: GHC.Stack.Types.CallStack
[GblId]
$dIP_r1O6U
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "error"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "fake_uid"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "Other.EDSL"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString#
            "/home/jimmy/newDisk/Repo/misc/haskell/src/Other/EDSL.hs"#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 12#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 29#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 3, coercions: 4, joins: 0/0}
$csignum_r1O6V :: Expr -> Expr
[GblId]
$csignum_r1O6V
  = break<6>()
    error
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ (Expr -> Expr)
      ($dIP_r1O6U
       `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "no signum"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cabs_r1O6W :: Expr -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cabs_r1O6W
  = \ (e2_a1O1G :: Expr) ->
      break<5>(e2_a1O1G) Other.EDSL.Abs e2_a1O1G

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c*_r1O6X :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c*_r1O6X
  = \ (e2_a1O1E :: Expr) (e3_a1O1F :: Expr) ->
      break<4>(e2_a1O1E,e3_a1O1F) Other.EDSL.Mul e2_a1O1E e3_a1O1F

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c-_r1O6Y :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c-_r1O6Y
  = \ (e2_a1O1C :: Expr) (e3_a1O1D :: Expr) ->
      break<3>(e2_a1O1C,e3_a1O1D) Other.EDSL.Sub e2_a1O1C e3_a1O1D

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c+_r1O6Z :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c+_r1O6Z
  = \ (e2_a1O1A :: Expr) (e3_a1O1B :: Expr) ->
      break<2>(e2_a1O1A,e3_a1O1B) Other.EDSL.Add e2_a1O1A e3_a1O1B

Rec {
-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fNumExpr [InlPrag=NOUSERINLINE CONLIKE] :: Num Expr
[GblId[DFunId]]
Other.EDSL.$fNumExpr
  = GHC.Num.C:Num
      @ Expr
      $c+_r1O6Z
      $c-_r1O6Y
      $c*_r1O6X
      $cnegate_r1O70
      $cabs_r1O6W
      $csignum_r1O6V
      $cfromInteger_r1J0q

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cnegate_r1O70 :: Expr -> Expr
[GblId]
$cnegate_r1O70 = GHC.Num.$dmnegate @ Expr Other.EDSL.$fNumExpr
end Rec }

Rec {
-- RHS size: {terms: 101, types: 50, coercions: 0, joins: 0/0}
$cshowsPrec_r1O71 :: Int -> Expr -> ShowS
[GblId, Arity=2, Unf=OtherCon []]
$cshowsPrec_r1O71
  = \ (a_a1O3f :: Int) (ds_d1O6m :: Expr) ->
      case ds_d1O6m of {
        Lit b1_a1O3g ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1O3f
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Lit "#))
               (showsPrec
                  @ Integer
                  GHC.Show.$fShowInteger
                  (ghc-prim-0.6.1:GHC.Types.I# 11#)
                  b1_a1O3g));
        Add b1_a1O3i b2_a1O3j ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1O3f
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Add "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1O71 (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1O3i)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1O71 (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1O3j))));
        Sub b1_a1O3l b2_a1O3m ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1O3f
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Sub "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1O71 (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1O3l)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1O71 (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1O3m))));
        Mul b1_a1O3o b2_a1O3p ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1O3f
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Mul "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1O71 (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1O3o)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1O71 (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1O3p))));
        Abs b1_a1O3r ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1O3f
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Abs "#))
               ($cshowsPrec_r1O71 (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1O3r))
      }
end Rec }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fShowExpr [InlPrag=NOUSERINLINE CONLIKE] :: Show Expr
[GblId[DFunId]]
Other.EDSL.$fShowExpr
  = GHC.Show.C:Show
      @ Expr $cshowsPrec_r1O71 $cshow_r1O73 $cshowList_r1O72

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshowList_r1O72 :: [Expr] -> ShowS
[GblId]
$cshowList_r1O72
  = GHC.Show.$dmshowList @ Expr Other.EDSL.$fShowExpr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshow_r1O73 :: Expr -> String
[GblId]
$cshow_r1O73 = GHC.Show.$dmshow @ Expr Other.EDSL.$fShowExpr
end Rec }

Rec {
-- RHS size: {terms: 62, types: 25, coercions: 0, joins: 0/0}
$c==_r1O74 :: Expr -> Expr -> Bool
[GblId, Arity=2, Unf=OtherCon []]
$c==_r1O74
  = \ (ds_d1O6i :: Expr) (ds1_d1O6j :: Expr) ->
      case ds_d1O6i of {
        Lit a1_a1O2Z ->
          case ds1_d1O6j of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Lit b1_a1O30 ->
              ==
                @ Integer
                integer-gmp-1.0.3.0:GHC.Integer.Type.$fEqInteger
                a1_a1O2Z
                b1_a1O30
          };
        Add a1_a1O31 a2_a1O32 ->
          case ds1_d1O6j of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Add b1_a1O33 b2_a1O34 ->
              && ($c==_r1O74 a1_a1O31 b1_a1O33) ($c==_r1O74 a2_a1O32 b2_a1O34)
          };
        Sub a1_a1O35 a2_a1O36 ->
          case ds1_d1O6j of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Sub b1_a1O37 b2_a1O38 ->
              && ($c==_r1O74 a1_a1O35 b1_a1O37) ($c==_r1O74 a2_a1O36 b2_a1O38)
          };
        Mul a1_a1O39 a2_a1O3a ->
          case ds1_d1O6j of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Mul b1_a1O3b b2_a1O3c ->
              && ($c==_r1O74 a1_a1O39 b1_a1O3b) ($c==_r1O74 a2_a1O3a b2_a1O3c)
          };
        Abs a1_a1O3d ->
          case ds1_d1O6j of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Abs b1_a1O3e -> $c==_r1O74 a1_a1O3d b1_a1O3e
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fEqExpr [InlPrag=NOUSERINLINE CONLIKE] :: Eq Expr
[GblId[DFunId]]
Other.EDSL.$fEqExpr
  = ghc-prim-0.6.1:GHC.Classes.C:Eq @ Expr $c==_r1O74 $c/=_r1O75

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_r1O75 :: Expr -> Expr -> Bool
[GblId]
$c/=_r1O75
  = ghc-prim-0.6.1:GHC.Classes.$dm/= @ Expr Other.EDSL.$fEqExpr
end Rec }

-- RHS size: {terms: 22, types: 7, coercions: 0, joins: 0/7}
e1 :: Expr
[GblId]
e1
  = break<1>()
    let {
      e2_a1O1A :: Expr
      [LclId]
      e2_a1O1A
        = let {
            n_a1O1z :: Integer
            [LclId, Unf=OtherCon []]
            n_a1O1z = 1 } in
          break<7>(n_a1O1z) Other.EDSL.Lit n_a1O1z } in
    let {
      e3_a1O1B :: Expr
      [LclId]
      e3_a1O1B
        = break<0>()
          let {
            e4_a1O1E :: Expr
            [LclId]
            e4_a1O1E
              = let {
                  n_a1O1z :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1O1z = 2 } in
                break<7>(n_a1O1z) Other.EDSL.Lit n_a1O1z } in
          let {
            e5_a1O1F :: Expr
            [LclId]
            e5_a1O1F
              = let {
                  n_a1O1z :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1O1z = 3 } in
                break<7>(n_a1O1z) Other.EDSL.Lit n_a1O1z } in
          break<4>(e4_a1O1E,e5_a1O1F) Other.EDSL.Mul e4_a1O1E e5_a1O1F } in
    break<2>(e2_a1O1A,e3_a1O1B) Other.EDSL.Add e2_a1O1A e3_a1O1B

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r1O76 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r1O76 = "fake_uid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r1O77 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r1O77
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule1_r1O76

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r1O78 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r1O78 = "Other.EDSL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r1O79 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r1O79
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule3_r1O78

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Other.EDSL.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule2_r1O77 $trModule4_r1O79

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r1O7a :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r1O7a
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      integer-gmp-1.0.3.0:GHC.Integer.Type.$tcInteger
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcExpr1_r1O7b :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr1_r1O7b = "Expr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcExpr2_r1O7c :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr2_r1O7c = ghc-prim-0.6.1:GHC.Types.TrNameS $tcExpr1_r1O7b

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tcExpr :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tcExpr
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8398727400959966989##
      12673861892423164487##
      Other.EDSL.$trModule
      $tcExpr2_r1O7c
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r1O7d :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r1O7d
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      Other.EDSL.$tcExpr
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r1O7e :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r1O7e
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_r1O7a $krep1_r1O7d

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Lit1_r1O7f :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit1_r1O7f = "'Lit"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Lit2_r1O7g :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit2_r1O7g = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Lit1_r1O7f

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Lit :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Lit
  = ghc-prim-0.6.1:GHC.Types.TyCon
      13337885009084958966##
      7363941603261238598##
      Other.EDSL.$trModule
      $tc'Lit2_r1O7g
      0#
      $krep2_r1O7e

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r1O7h :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_r1O7h
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1O7d $krep1_r1O7d

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Abs1_r1O7i :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs1_r1O7i = "'Abs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Abs2_r1O7j :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs2_r1O7j = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Abs1_r1O7i

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Abs :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Abs
  = ghc-prim-0.6.1:GHC.Types.TyCon
      3843884384588183065##
      1162608799125344997##
      Other.EDSL.$trModule
      $tc'Abs2_r1O7j
      0#
      $krep3_r1O7h

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r1O7k :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep4_r1O7k
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1O7d $krep3_r1O7h

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Add1_r1O7l :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add1_r1O7l = "'Add"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Add2_r1O7m :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add2_r1O7m = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Add1_r1O7l

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Add :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Add
  = ghc-prim-0.6.1:GHC.Types.TyCon
      15452742132278570574##
      667697361562973212##
      Other.EDSL.$trModule
      $tc'Add2_r1O7m
      0#
      $krep4_r1O7k

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Sub1_r1O7n :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub1_r1O7n = "'Sub"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Sub2_r1O7o :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub2_r1O7o = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Sub1_r1O7n

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Sub :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Sub
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8699310246118770061##
      14671028901294498827##
      Other.EDSL.$trModule
      $tc'Sub2_r1O7o
      0#
      $krep4_r1O7k

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Mul1_r1O7p :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul1_r1O7p = "'Mul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Mul2_r1O7q :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul2_r1O7q = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Mul1_r1O7p

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Mul :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Mul
  = ghc-prim-0.6.1:GHC.Types.TyCon
      9170811447061351314##
      945847458421549353##
      Other.EDSL.$trModule
      $tc'Mul2_r1O7q
      0#
      $krep4_r1O7k



==================== Tidy Core ====================
2021-05-22 07:41:29.895017002 UTC

Result size of Tidy Core
  = {terms: 382, types: 172, coercions: 4, joins: 0/7}

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cfromInteger_r1Ocm :: Integer -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cfromInteger_r1Ocm
  = \ (n_a1Onx :: Integer) ->
      break<7>(n_a1Onx) Other.EDSL.Lit n_a1Onx

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP_r1OsS :: GHC.Stack.Types.CallStack
[GblId]
$dIP_r1OsS
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "error"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "fake_uid"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "Other.EDSL"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString#
            "/home/jimmy/newDisk/Repo/misc/haskell/src/Other/EDSL.hs"#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 12#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 29#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 3, coercions: 4, joins: 0/0}
$csignum_r1OsT :: Expr -> Expr
[GblId]
$csignum_r1OsT
  = break<6>()
    error
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ (Expr -> Expr)
      ($dIP_r1OsS
       `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "no signum"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cabs_r1OsU :: Expr -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cabs_r1OsU
  = \ (e2_a1OnE :: Expr) ->
      break<5>(e2_a1OnE) Other.EDSL.Abs e2_a1OnE

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c*_r1OsV :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c*_r1OsV
  = \ (e2_a1OnC :: Expr) (e3_a1OnD :: Expr) ->
      break<4>(e2_a1OnC,e3_a1OnD) Other.EDSL.Mul e2_a1OnC e3_a1OnD

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c-_r1OsW :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c-_r1OsW
  = \ (e2_a1OnA :: Expr) (e3_a1OnB :: Expr) ->
      break<3>(e2_a1OnA,e3_a1OnB) Other.EDSL.Sub e2_a1OnA e3_a1OnB

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c+_r1OsX :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c+_r1OsX
  = \ (e2_a1Ony :: Expr) (e3_a1Onz :: Expr) ->
      break<2>(e2_a1Ony,e3_a1Onz) Other.EDSL.Add e2_a1Ony e3_a1Onz

Rec {
-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fNumExpr [InlPrag=NOUSERINLINE CONLIKE] :: Num Expr
[GblId[DFunId]]
Other.EDSL.$fNumExpr
  = GHC.Num.C:Num
      @ Expr
      $c+_r1OsX
      $c-_r1OsW
      $c*_r1OsV
      $cnegate_r1OsY
      $cabs_r1OsU
      $csignum_r1OsT
      $cfromInteger_r1Ocm

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cnegate_r1OsY :: Expr -> Expr
[GblId]
$cnegate_r1OsY = GHC.Num.$dmnegate @ Expr Other.EDSL.$fNumExpr
end Rec }

Rec {
-- RHS size: {terms: 101, types: 50, coercions: 0, joins: 0/0}
$cshowsPrec_r1OsZ :: Int -> Expr -> ShowS
[GblId, Arity=2, Unf=OtherCon []]
$cshowsPrec_r1OsZ
  = \ (a_a1Opd :: Int) (ds_d1Osk :: Expr) ->
      case ds_d1Osk of {
        Lit b1_a1Ope ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Opd
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Lit "#))
               (showsPrec
                  @ Integer
                  GHC.Show.$fShowInteger
                  (ghc-prim-0.6.1:GHC.Types.I# 11#)
                  b1_a1Ope));
        Add b1_a1Opg b2_a1Oph ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Opd
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Add "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1OsZ (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Opg)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1OsZ (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Oph))));
        Sub b1_a1Opj b2_a1Opk ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Opd
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Sub "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1OsZ (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Opj)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1OsZ (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Opk))));
        Mul b1_a1Opm b2_a1Opn ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Opd
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Mul "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1OsZ (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Opm)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1OsZ (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Opn))));
        Abs b1_a1Opp ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Opd
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Abs "#))
               ($cshowsPrec_r1OsZ (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Opp))
      }
end Rec }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fShowExpr [InlPrag=NOUSERINLINE CONLIKE] :: Show Expr
[GblId[DFunId]]
Other.EDSL.$fShowExpr
  = GHC.Show.C:Show
      @ Expr $cshowsPrec_r1OsZ $cshow_r1Ot1 $cshowList_r1Ot0

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshowList_r1Ot0 :: [Expr] -> ShowS
[GblId]
$cshowList_r1Ot0
  = GHC.Show.$dmshowList @ Expr Other.EDSL.$fShowExpr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshow_r1Ot1 :: Expr -> String
[GblId]
$cshow_r1Ot1 = GHC.Show.$dmshow @ Expr Other.EDSL.$fShowExpr
end Rec }

Rec {
-- RHS size: {terms: 62, types: 25, coercions: 0, joins: 0/0}
$c==_r1Ot2 :: Expr -> Expr -> Bool
[GblId, Arity=2, Unf=OtherCon []]
$c==_r1Ot2
  = \ (ds_d1Osg :: Expr) (ds1_d1Osh :: Expr) ->
      case ds_d1Osg of {
        Lit a1_a1OoX ->
          case ds1_d1Osh of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Lit b1_a1OoY ->
              ==
                @ Integer
                integer-gmp-1.0.3.0:GHC.Integer.Type.$fEqInteger
                a1_a1OoX
                b1_a1OoY
          };
        Add a1_a1OoZ a2_a1Op0 ->
          case ds1_d1Osh of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Add b1_a1Op1 b2_a1Op2 ->
              && ($c==_r1Ot2 a1_a1OoZ b1_a1Op1) ($c==_r1Ot2 a2_a1Op0 b2_a1Op2)
          };
        Sub a1_a1Op3 a2_a1Op4 ->
          case ds1_d1Osh of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Sub b1_a1Op5 b2_a1Op6 ->
              && ($c==_r1Ot2 a1_a1Op3 b1_a1Op5) ($c==_r1Ot2 a2_a1Op4 b2_a1Op6)
          };
        Mul a1_a1Op7 a2_a1Op8 ->
          case ds1_d1Osh of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Mul b1_a1Op9 b2_a1Opa ->
              && ($c==_r1Ot2 a1_a1Op7 b1_a1Op9) ($c==_r1Ot2 a2_a1Op8 b2_a1Opa)
          };
        Abs a1_a1Opb ->
          case ds1_d1Osh of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Abs b1_a1Opc -> $c==_r1Ot2 a1_a1Opb b1_a1Opc
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fEqExpr [InlPrag=NOUSERINLINE CONLIKE] :: Eq Expr
[GblId[DFunId]]
Other.EDSL.$fEqExpr
  = ghc-prim-0.6.1:GHC.Classes.C:Eq @ Expr $c==_r1Ot2 $c/=_r1Ot3

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_r1Ot3 :: Expr -> Expr -> Bool
[GblId]
$c/=_r1Ot3
  = ghc-prim-0.6.1:GHC.Classes.$dm/= @ Expr Other.EDSL.$fEqExpr
end Rec }

-- RHS size: {terms: 22, types: 7, coercions: 0, joins: 0/7}
e1 :: Expr
[GblId]
e1
  = break<1>()
    let {
      e2_a1Ony :: Expr
      [LclId]
      e2_a1Ony
        = let {
            n_a1Onx :: Integer
            [LclId, Unf=OtherCon []]
            n_a1Onx = 1 } in
          break<7>(n_a1Onx) Other.EDSL.Lit n_a1Onx } in
    let {
      e3_a1Onz :: Expr
      [LclId]
      e3_a1Onz
        = break<0>()
          let {
            e4_a1OnC :: Expr
            [LclId]
            e4_a1OnC
              = let {
                  n_a1Onx :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1Onx = 2 } in
                break<7>(n_a1Onx) Other.EDSL.Lit n_a1Onx } in
          let {
            e5_a1OnD :: Expr
            [LclId]
            e5_a1OnD
              = let {
                  n_a1Onx :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1Onx = 3 } in
                break<7>(n_a1Onx) Other.EDSL.Lit n_a1Onx } in
          break<4>(e4_a1OnC,e5_a1OnD) Other.EDSL.Mul e4_a1OnC e5_a1OnD } in
    break<2>(e2_a1Ony,e3_a1Onz) Other.EDSL.Add e2_a1Ony e3_a1Onz

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r1Ot4 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r1Ot4 = "fake_uid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r1Ot5 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r1Ot5
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule1_r1Ot4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r1Ot6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r1Ot6 = "Other.EDSL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r1Ot7 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r1Ot7
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule3_r1Ot6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Other.EDSL.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule2_r1Ot5 $trModule4_r1Ot7

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r1Ot8 :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r1Ot8
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      integer-gmp-1.0.3.0:GHC.Integer.Type.$tcInteger
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcExpr1_r1Ot9 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr1_r1Ot9 = "Expr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcExpr2_r1Ota :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr2_r1Ota = ghc-prim-0.6.1:GHC.Types.TrNameS $tcExpr1_r1Ot9

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tcExpr :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tcExpr
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8398727400959966989##
      12673861892423164487##
      Other.EDSL.$trModule
      $tcExpr2_r1Ota
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r1Otb :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r1Otb
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      Other.EDSL.$tcExpr
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r1Otc :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r1Otc
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_r1Ot8 $krep1_r1Otb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Lit1_r1Otd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit1_r1Otd = "'Lit"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Lit2_r1Ote :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit2_r1Ote = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Lit1_r1Otd

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Lit :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Lit
  = ghc-prim-0.6.1:GHC.Types.TyCon
      13337885009084958966##
      7363941603261238598##
      Other.EDSL.$trModule
      $tc'Lit2_r1Ote
      0#
      $krep2_r1Otc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r1Otf :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_r1Otf
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1Otb $krep1_r1Otb

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Abs1_r1Otg :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs1_r1Otg = "'Abs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Abs2_r1Oth :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs2_r1Oth = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Abs1_r1Otg

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Abs :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Abs
  = ghc-prim-0.6.1:GHC.Types.TyCon
      3843884384588183065##
      1162608799125344997##
      Other.EDSL.$trModule
      $tc'Abs2_r1Oth
      0#
      $krep3_r1Otf

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r1Oti :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep4_r1Oti
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1Otb $krep3_r1Otf

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Add1_r1Otj :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add1_r1Otj = "'Add"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Add2_r1Otk :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add2_r1Otk = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Add1_r1Otj

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Add :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Add
  = ghc-prim-0.6.1:GHC.Types.TyCon
      15452742132278570574##
      667697361562973212##
      Other.EDSL.$trModule
      $tc'Add2_r1Otk
      0#
      $krep4_r1Oti

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Sub1_r1Otl :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub1_r1Otl = "'Sub"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Sub2_r1Otm :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub2_r1Otm = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Sub1_r1Otl

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Sub :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Sub
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8699310246118770061##
      14671028901294498827##
      Other.EDSL.$trModule
      $tc'Sub2_r1Otm
      0#
      $krep4_r1Oti

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Mul1_r1Otn :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul1_r1Otn = "'Mul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Mul2_r1Oto :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul2_r1Oto = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Mul1_r1Otn

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Mul :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Mul
  = ghc-prim-0.6.1:GHC.Types.TyCon
      9170811447061351314##
      945847458421549353##
      Other.EDSL.$trModule
      $tc'Mul2_r1Oto
      0#
      $krep4_r1Oti



==================== Tidy Core ====================
2021-05-22 07:41:34.587412836 UTC

Result size of Tidy Core
  = {terms: 382, types: 172, coercions: 4, joins: 0/7}

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cfromInteger_r1Oy3 :: Integer -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cfromInteger_r1Oy3
  = \ (n_a1P4X :: Integer) ->
      break<7>(n_a1P4X) Other.EDSL.Lit n_a1P4X

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP_r1Pai :: GHC.Stack.Types.CallStack
[GblId]
$dIP_r1Pai
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "error"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "fake_uid"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "Other.EDSL"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString#
            "/home/jimmy/newDisk/Repo/misc/haskell/src/Other/EDSL.hs"#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 12#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 29#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 3, coercions: 4, joins: 0/0}
$csignum_r1Paj :: Expr -> Expr
[GblId]
$csignum_r1Paj
  = break<6>()
    error
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ (Expr -> Expr)
      ($dIP_r1Pai
       `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "no signum"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cabs_r1Pak :: Expr -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cabs_r1Pak
  = \ (e2_a1P54 :: Expr) ->
      break<5>(e2_a1P54) Other.EDSL.Abs e2_a1P54

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c*_r1Pal :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c*_r1Pal
  = \ (e2_a1P52 :: Expr) (e3_a1P53 :: Expr) ->
      break<4>(e2_a1P52,e3_a1P53) Other.EDSL.Mul e2_a1P52 e3_a1P53

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c-_r1Pam :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c-_r1Pam
  = \ (e2_a1P50 :: Expr) (e3_a1P51 :: Expr) ->
      break<3>(e2_a1P50,e3_a1P51) Other.EDSL.Sub e2_a1P50 e3_a1P51

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c+_r1Pan :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c+_r1Pan
  = \ (e2_a1P4Y :: Expr) (e3_a1P4Z :: Expr) ->
      break<2>(e2_a1P4Y,e3_a1P4Z) Other.EDSL.Add e2_a1P4Y e3_a1P4Z

Rec {
-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fNumExpr [InlPrag=NOUSERINLINE CONLIKE] :: Num Expr
[GblId[DFunId]]
Other.EDSL.$fNumExpr
  = GHC.Num.C:Num
      @ Expr
      $c+_r1Pan
      $c-_r1Pam
      $c*_r1Pal
      $cnegate_r1Pao
      $cabs_r1Pak
      $csignum_r1Paj
      $cfromInteger_r1Oy3

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cnegate_r1Pao :: Expr -> Expr
[GblId]
$cnegate_r1Pao = GHC.Num.$dmnegate @ Expr Other.EDSL.$fNumExpr
end Rec }

Rec {
-- RHS size: {terms: 101, types: 50, coercions: 0, joins: 0/0}
$cshowsPrec_r1Pap :: Int -> Expr -> ShowS
[GblId, Arity=2, Unf=OtherCon []]
$cshowsPrec_r1Pap
  = \ (a_a1P6D :: Int) (ds_d1P9K :: Expr) ->
      case ds_d1P9K of {
        Lit b1_a1P6E ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1P6D
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Lit "#))
               (showsPrec
                  @ Integer
                  GHC.Show.$fShowInteger
                  (ghc-prim-0.6.1:GHC.Types.I# 11#)
                  b1_a1P6E));
        Add b1_a1P6G b2_a1P6H ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1P6D
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Add "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1Pap (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1P6G)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1Pap (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1P6H))));
        Sub b1_a1P6J b2_a1P6K ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1P6D
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Sub "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1Pap (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1P6J)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1Pap (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1P6K))));
        Mul b1_a1P6M b2_a1P6N ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1P6D
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Mul "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1Pap (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1P6M)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1Pap (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1P6N))));
        Abs b1_a1P6P ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1P6D
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Abs "#))
               ($cshowsPrec_r1Pap (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1P6P))
      }
end Rec }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fShowExpr [InlPrag=NOUSERINLINE CONLIKE] :: Show Expr
[GblId[DFunId]]
Other.EDSL.$fShowExpr
  = GHC.Show.C:Show
      @ Expr $cshowsPrec_r1Pap $cshow_r1Par $cshowList_r1Paq

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshowList_r1Paq :: [Expr] -> ShowS
[GblId]
$cshowList_r1Paq
  = GHC.Show.$dmshowList @ Expr Other.EDSL.$fShowExpr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshow_r1Par :: Expr -> String
[GblId]
$cshow_r1Par = GHC.Show.$dmshow @ Expr Other.EDSL.$fShowExpr
end Rec }

Rec {
-- RHS size: {terms: 62, types: 25, coercions: 0, joins: 0/0}
$c==_r1Pas :: Expr -> Expr -> Bool
[GblId, Arity=2, Unf=OtherCon []]
$c==_r1Pas
  = \ (ds_d1P9G :: Expr) (ds1_d1P9H :: Expr) ->
      case ds_d1P9G of {
        Lit a1_a1P6n ->
          case ds1_d1P9H of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Lit b1_a1P6o ->
              ==
                @ Integer
                integer-gmp-1.0.3.0:GHC.Integer.Type.$fEqInteger
                a1_a1P6n
                b1_a1P6o
          };
        Add a1_a1P6p a2_a1P6q ->
          case ds1_d1P9H of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Add b1_a1P6r b2_a1P6s ->
              && ($c==_r1Pas a1_a1P6p b1_a1P6r) ($c==_r1Pas a2_a1P6q b2_a1P6s)
          };
        Sub a1_a1P6t a2_a1P6u ->
          case ds1_d1P9H of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Sub b1_a1P6v b2_a1P6w ->
              && ($c==_r1Pas a1_a1P6t b1_a1P6v) ($c==_r1Pas a2_a1P6u b2_a1P6w)
          };
        Mul a1_a1P6x a2_a1P6y ->
          case ds1_d1P9H of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Mul b1_a1P6z b2_a1P6A ->
              && ($c==_r1Pas a1_a1P6x b1_a1P6z) ($c==_r1Pas a2_a1P6y b2_a1P6A)
          };
        Abs a1_a1P6B ->
          case ds1_d1P9H of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Abs b1_a1P6C -> $c==_r1Pas a1_a1P6B b1_a1P6C
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fEqExpr [InlPrag=NOUSERINLINE CONLIKE] :: Eq Expr
[GblId[DFunId]]
Other.EDSL.$fEqExpr
  = ghc-prim-0.6.1:GHC.Classes.C:Eq @ Expr $c==_r1Pas $c/=_r1Pat

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_r1Pat :: Expr -> Expr -> Bool
[GblId]
$c/=_r1Pat
  = ghc-prim-0.6.1:GHC.Classes.$dm/= @ Expr Other.EDSL.$fEqExpr
end Rec }

-- RHS size: {terms: 22, types: 7, coercions: 0, joins: 0/7}
e1 :: Expr
[GblId]
e1
  = break<1>()
    let {
      e2_a1P4Y :: Expr
      [LclId]
      e2_a1P4Y
        = let {
            n_a1P4X :: Integer
            [LclId, Unf=OtherCon []]
            n_a1P4X = 1 } in
          break<7>(n_a1P4X) Other.EDSL.Lit n_a1P4X } in
    let {
      e3_a1P4Z :: Expr
      [LclId]
      e3_a1P4Z
        = break<0>()
          let {
            e4_a1P52 :: Expr
            [LclId]
            e4_a1P52
              = let {
                  n_a1P4X :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1P4X = 2 } in
                break<7>(n_a1P4X) Other.EDSL.Lit n_a1P4X } in
          let {
            e5_a1P53 :: Expr
            [LclId]
            e5_a1P53
              = let {
                  n_a1P4X :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1P4X = 3 } in
                break<7>(n_a1P4X) Other.EDSL.Lit n_a1P4X } in
          break<4>(e4_a1P52,e5_a1P53) Other.EDSL.Mul e4_a1P52 e5_a1P53 } in
    break<2>(e2_a1P4Y,e3_a1P4Z) Other.EDSL.Add e2_a1P4Y e3_a1P4Z

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r1Pau :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r1Pau = "fake_uid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r1Pav :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r1Pav
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule1_r1Pau

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r1Paw :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r1Paw = "Other.EDSL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r1Pax :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r1Pax
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule3_r1Paw

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Other.EDSL.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule2_r1Pav $trModule4_r1Pax

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r1Pay :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r1Pay
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      integer-gmp-1.0.3.0:GHC.Integer.Type.$tcInteger
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcExpr1_r1Paz :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr1_r1Paz = "Expr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcExpr2_r1PaA :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr2_r1PaA = ghc-prim-0.6.1:GHC.Types.TrNameS $tcExpr1_r1Paz

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tcExpr :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tcExpr
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8398727400959966989##
      12673861892423164487##
      Other.EDSL.$trModule
      $tcExpr2_r1PaA
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r1PaB :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r1PaB
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      Other.EDSL.$tcExpr
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r1PaC :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r1PaC
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_r1Pay $krep1_r1PaB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Lit1_r1PaD :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit1_r1PaD = "'Lit"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Lit2_r1PaE :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit2_r1PaE = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Lit1_r1PaD

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Lit :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Lit
  = ghc-prim-0.6.1:GHC.Types.TyCon
      13337885009084958966##
      7363941603261238598##
      Other.EDSL.$trModule
      $tc'Lit2_r1PaE
      0#
      $krep2_r1PaC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r1PaF :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_r1PaF
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1PaB $krep1_r1PaB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Abs1_r1PaG :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs1_r1PaG = "'Abs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Abs2_r1PaH :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs2_r1PaH = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Abs1_r1PaG

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Abs :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Abs
  = ghc-prim-0.6.1:GHC.Types.TyCon
      3843884384588183065##
      1162608799125344997##
      Other.EDSL.$trModule
      $tc'Abs2_r1PaH
      0#
      $krep3_r1PaF

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r1PaI :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep4_r1PaI
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1PaB $krep3_r1PaF

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Add1_r1PaJ :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add1_r1PaJ = "'Add"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Add2_r1PaK :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add2_r1PaK = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Add1_r1PaJ

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Add :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Add
  = ghc-prim-0.6.1:GHC.Types.TyCon
      15452742132278570574##
      667697361562973212##
      Other.EDSL.$trModule
      $tc'Add2_r1PaK
      0#
      $krep4_r1PaI

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Sub1_r1PaL :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub1_r1PaL = "'Sub"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Sub2_r1PaM :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub2_r1PaM = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Sub1_r1PaL

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Sub :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Sub
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8699310246118770061##
      14671028901294498827##
      Other.EDSL.$trModule
      $tc'Sub2_r1PaM
      0#
      $krep4_r1PaI

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Mul1_r1PaN :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul1_r1PaN = "'Mul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Mul2_r1PaO :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul2_r1PaO = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Mul1_r1PaN

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Mul :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Mul
  = ghc-prim-0.6.1:GHC.Types.TyCon
      9170811447061351314##
      945847458421549353##
      Other.EDSL.$trModule
      $tc'Mul2_r1PaO
      0#
      $krep4_r1PaI



==================== Tidy Core ====================
2021-05-22 07:41:44.72550145 UTC

Result size of Tidy Core
  = {terms: 382, types: 172, coercions: 4, joins: 0/7}

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cfromInteger_r1Pft :: Integer -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cfromInteger_r1Pft
  = \ (n_a1Q1u :: Integer) ->
      break<7>(n_a1Q1u) Other.EDSL.Lit n_a1Q1u

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP_r1Q6P :: GHC.Stack.Types.CallStack
[GblId]
$dIP_r1Q6P
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "error"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "fake_uid"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "Other.EDSL"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString#
            "/home/jimmy/newDisk/Repo/misc/haskell/src/Other/EDSL.hs"#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 12#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 29#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 3, coercions: 4, joins: 0/0}
$csignum_r1Q6Q :: Expr -> Expr
[GblId]
$csignum_r1Q6Q
  = break<6>()
    error
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ (Expr -> Expr)
      ($dIP_r1Q6P
       `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "no signum"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cabs_r1Q6R :: Expr -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cabs_r1Q6R
  = \ (e2_a1Q1B :: Expr) ->
      break<5>(e2_a1Q1B) Other.EDSL.Abs e2_a1Q1B

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c*_r1Q6S :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c*_r1Q6S
  = \ (e2_a1Q1z :: Expr) (e3_a1Q1A :: Expr) ->
      break<4>(e2_a1Q1z,e3_a1Q1A) Other.EDSL.Mul e2_a1Q1z e3_a1Q1A

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c-_r1Q6T :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c-_r1Q6T
  = \ (e2_a1Q1x :: Expr) (e3_a1Q1y :: Expr) ->
      break<3>(e2_a1Q1x,e3_a1Q1y) Other.EDSL.Sub e2_a1Q1x e3_a1Q1y

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c+_r1Q6U :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c+_r1Q6U
  = \ (e2_a1Q1v :: Expr) (e3_a1Q1w :: Expr) ->
      break<2>(e2_a1Q1v,e3_a1Q1w) Other.EDSL.Add e2_a1Q1v e3_a1Q1w

Rec {
-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fNumExpr [InlPrag=NOUSERINLINE CONLIKE] :: Num Expr
[GblId[DFunId]]
Other.EDSL.$fNumExpr
  = GHC.Num.C:Num
      @ Expr
      $c+_r1Q6U
      $c-_r1Q6T
      $c*_r1Q6S
      $cnegate_r1Q6V
      $cabs_r1Q6R
      $csignum_r1Q6Q
      $cfromInteger_r1Pft

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cnegate_r1Q6V :: Expr -> Expr
[GblId]
$cnegate_r1Q6V = GHC.Num.$dmnegate @ Expr Other.EDSL.$fNumExpr
end Rec }

Rec {
-- RHS size: {terms: 101, types: 50, coercions: 0, joins: 0/0}
$cshowsPrec_r1Q6W :: Int -> Expr -> ShowS
[GblId, Arity=2, Unf=OtherCon []]
$cshowsPrec_r1Q6W
  = \ (a_a1Q3a :: Int) (ds_d1Q6h :: Expr) ->
      case ds_d1Q6h of {
        Lit b1_a1Q3b ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Q3a
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Lit "#))
               (showsPrec
                  @ Integer
                  GHC.Show.$fShowInteger
                  (ghc-prim-0.6.1:GHC.Types.I# 11#)
                  b1_a1Q3b));
        Add b1_a1Q3d b2_a1Q3e ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Q3a
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Add "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1Q6W (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Q3d)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1Q6W (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Q3e))));
        Sub b1_a1Q3g b2_a1Q3h ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Q3a
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Sub "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1Q6W (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Q3g)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1Q6W (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Q3h))));
        Mul b1_a1Q3j b2_a1Q3k ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Q3a
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Mul "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1Q6W (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Q3j)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1Q6W (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Q3k))));
        Abs b1_a1Q3m ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Q3a
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Abs "#))
               ($cshowsPrec_r1Q6W (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Q3m))
      }
end Rec }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fShowExpr [InlPrag=NOUSERINLINE CONLIKE] :: Show Expr
[GblId[DFunId]]
Other.EDSL.$fShowExpr
  = GHC.Show.C:Show
      @ Expr $cshowsPrec_r1Q6W $cshow_r1Q6Y $cshowList_r1Q6X

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshowList_r1Q6X :: [Expr] -> ShowS
[GblId]
$cshowList_r1Q6X
  = GHC.Show.$dmshowList @ Expr Other.EDSL.$fShowExpr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshow_r1Q6Y :: Expr -> String
[GblId]
$cshow_r1Q6Y = GHC.Show.$dmshow @ Expr Other.EDSL.$fShowExpr
end Rec }

Rec {
-- RHS size: {terms: 62, types: 25, coercions: 0, joins: 0/0}
$c==_r1Q6Z :: Expr -> Expr -> Bool
[GblId, Arity=2, Unf=OtherCon []]
$c==_r1Q6Z
  = \ (ds_d1Q6d :: Expr) (ds1_d1Q6e :: Expr) ->
      case ds_d1Q6d of {
        Lit a1_a1Q2U ->
          case ds1_d1Q6e of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Lit b1_a1Q2V ->
              ==
                @ Integer
                integer-gmp-1.0.3.0:GHC.Integer.Type.$fEqInteger
                a1_a1Q2U
                b1_a1Q2V
          };
        Add a1_a1Q2W a2_a1Q2X ->
          case ds1_d1Q6e of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Add b1_a1Q2Y b2_a1Q2Z ->
              && ($c==_r1Q6Z a1_a1Q2W b1_a1Q2Y) ($c==_r1Q6Z a2_a1Q2X b2_a1Q2Z)
          };
        Sub a1_a1Q30 a2_a1Q31 ->
          case ds1_d1Q6e of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Sub b1_a1Q32 b2_a1Q33 ->
              && ($c==_r1Q6Z a1_a1Q30 b1_a1Q32) ($c==_r1Q6Z a2_a1Q31 b2_a1Q33)
          };
        Mul a1_a1Q34 a2_a1Q35 ->
          case ds1_d1Q6e of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Mul b1_a1Q36 b2_a1Q37 ->
              && ($c==_r1Q6Z a1_a1Q34 b1_a1Q36) ($c==_r1Q6Z a2_a1Q35 b2_a1Q37)
          };
        Abs a1_a1Q38 ->
          case ds1_d1Q6e of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Abs b1_a1Q39 -> $c==_r1Q6Z a1_a1Q38 b1_a1Q39
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fEqExpr [InlPrag=NOUSERINLINE CONLIKE] :: Eq Expr
[GblId[DFunId]]
Other.EDSL.$fEqExpr
  = ghc-prim-0.6.1:GHC.Classes.C:Eq @ Expr $c==_r1Q6Z $c/=_r1Q70

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_r1Q70 :: Expr -> Expr -> Bool
[GblId]
$c/=_r1Q70
  = ghc-prim-0.6.1:GHC.Classes.$dm/= @ Expr Other.EDSL.$fEqExpr
end Rec }

-- RHS size: {terms: 22, types: 7, coercions: 0, joins: 0/7}
e1 :: Expr
[GblId]
e1
  = break<1>()
    let {
      e2_a1Q1v :: Expr
      [LclId]
      e2_a1Q1v
        = let {
            n_a1Q1u :: Integer
            [LclId, Unf=OtherCon []]
            n_a1Q1u = 1 } in
          break<7>(n_a1Q1u) Other.EDSL.Lit n_a1Q1u } in
    let {
      e3_a1Q1w :: Expr
      [LclId]
      e3_a1Q1w
        = break<0>()
          let {
            e4_a1Q1z :: Expr
            [LclId]
            e4_a1Q1z
              = let {
                  n_a1Q1u :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1Q1u = 2 } in
                break<7>(n_a1Q1u) Other.EDSL.Lit n_a1Q1u } in
          let {
            e5_a1Q1A :: Expr
            [LclId]
            e5_a1Q1A
              = let {
                  n_a1Q1u :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1Q1u = 3 } in
                break<7>(n_a1Q1u) Other.EDSL.Lit n_a1Q1u } in
          break<4>(e4_a1Q1z,e5_a1Q1A) Other.EDSL.Mul e4_a1Q1z e5_a1Q1A } in
    break<2>(e2_a1Q1v,e3_a1Q1w) Other.EDSL.Add e2_a1Q1v e3_a1Q1w

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r1Q71 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r1Q71 = "fake_uid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r1Q72 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r1Q72
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule1_r1Q71

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r1Q73 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r1Q73 = "Other.EDSL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r1Q74 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r1Q74
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule3_r1Q73

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Other.EDSL.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule2_r1Q72 $trModule4_r1Q74

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r1Q75 :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r1Q75
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      integer-gmp-1.0.3.0:GHC.Integer.Type.$tcInteger
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcExpr1_r1Q76 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr1_r1Q76 = "Expr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcExpr2_r1Q77 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr2_r1Q77 = ghc-prim-0.6.1:GHC.Types.TrNameS $tcExpr1_r1Q76

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tcExpr :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tcExpr
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8398727400959966989##
      12673861892423164487##
      Other.EDSL.$trModule
      $tcExpr2_r1Q77
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r1Q78 :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r1Q78
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      Other.EDSL.$tcExpr
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r1Q79 :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r1Q79
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_r1Q75 $krep1_r1Q78

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Lit1_r1Q7a :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit1_r1Q7a = "'Lit"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Lit2_r1Q7b :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit2_r1Q7b = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Lit1_r1Q7a

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Lit :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Lit
  = ghc-prim-0.6.1:GHC.Types.TyCon
      13337885009084958966##
      7363941603261238598##
      Other.EDSL.$trModule
      $tc'Lit2_r1Q7b
      0#
      $krep2_r1Q79

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r1Q7c :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_r1Q7c
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1Q78 $krep1_r1Q78

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Abs1_r1Q7d :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs1_r1Q7d = "'Abs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Abs2_r1Q7e :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs2_r1Q7e = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Abs1_r1Q7d

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Abs :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Abs
  = ghc-prim-0.6.1:GHC.Types.TyCon
      3843884384588183065##
      1162608799125344997##
      Other.EDSL.$trModule
      $tc'Abs2_r1Q7e
      0#
      $krep3_r1Q7c

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r1Q7f :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep4_r1Q7f
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1Q78 $krep3_r1Q7c

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Add1_r1Q7g :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add1_r1Q7g = "'Add"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Add2_r1Q7h :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add2_r1Q7h = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Add1_r1Q7g

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Add :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Add
  = ghc-prim-0.6.1:GHC.Types.TyCon
      15452742132278570574##
      667697361562973212##
      Other.EDSL.$trModule
      $tc'Add2_r1Q7h
      0#
      $krep4_r1Q7f

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Sub1_r1Q7i :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub1_r1Q7i = "'Sub"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Sub2_r1Q7j :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub2_r1Q7j = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Sub1_r1Q7i

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Sub :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Sub
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8699310246118770061##
      14671028901294498827##
      Other.EDSL.$trModule
      $tc'Sub2_r1Q7j
      0#
      $krep4_r1Q7f

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Mul1_r1Q7k :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul1_r1Q7k = "'Mul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Mul2_r1Q7l :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul2_r1Q7l = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Mul1_r1Q7k

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Mul :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Mul
  = ghc-prim-0.6.1:GHC.Types.TyCon
      9170811447061351314##
      945847458421549353##
      Other.EDSL.$trModule
      $tc'Mul2_r1Q7l
      0#
      $krep4_r1Q7f



==================== Tidy Core ====================
2021-05-22 07:41:56.908618939 UTC

Result size of Tidy Core
  = {terms: 382, types: 172, coercions: 4, joins: 0/7}

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cfromInteger_r1Qc0 :: Integer -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cfromInteger_r1Qc0
  = \ (n_a1R9u :: Integer) ->
      break<7>(n_a1R9u) Other.EDSL.Lit n_a1R9u

-- RHS size: {terms: 20, types: 3, coercions: 0, joins: 0/0}
$dIP_r1ReP :: GHC.Stack.Types.CallStack
[GblId]
$dIP_r1ReP
  = GHC.Stack.Types.pushCallStack
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "error"#,
       GHC.Stack.Types.SrcLoc
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "fake_uid"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString# "Other.EDSL"#)
         (ghc-prim-0.6.1:GHC.CString.unpackCString#
            "/home/jimmy/newDisk/Repo/misc/haskell/src/Other/EDSL.hs"#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 12#)
         (ghc-prim-0.6.1:GHC.Types.I# 49#)
         (ghc-prim-0.6.1:GHC.Types.I# 29#))
      GHC.Stack.Types.emptyCallStack

-- RHS size: {terms: 4, types: 3, coercions: 4, joins: 0/0}
$csignum_r1ReQ :: Expr -> Expr
[GblId]
$csignum_r1ReQ
  = break<6>()
    error
      @ 'ghc-prim-0.6.1:GHC.Types.LiftedRep
      @ (Expr -> Expr)
      ($dIP_r1ReP
       `cast` (Sym (ghc-prim-0.6.1:GHC.Classes.N:IP[0]
                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)
               :: GHC.Stack.Types.CallStack
                  ~R# (?callStack::GHC.Stack.Types.CallStack)))
      (ghc-prim-0.6.1:GHC.CString.unpackCString# "no signum"#)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$cabs_r1ReR :: Expr -> Expr
[GblId, Arity=1, Caf=NoCafRefs, Unf=OtherCon []]
$cabs_r1ReR
  = \ (e2_a1R9B :: Expr) ->
      break<5>(e2_a1R9B) Other.EDSL.Abs e2_a1R9B

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c*_r1ReS :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c*_r1ReS
  = \ (e2_a1R9z :: Expr) (e3_a1R9A :: Expr) ->
      break<4>(e2_a1R9z,e3_a1R9A) Other.EDSL.Mul e2_a1R9z e3_a1R9A

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c-_r1ReT :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c-_r1ReT
  = \ (e2_a1R9x :: Expr) (e3_a1R9y :: Expr) ->
      break<3>(e2_a1R9x,e3_a1R9y) Other.EDSL.Sub e2_a1R9x e3_a1R9y

-- RHS size: {terms: 5, types: 2, coercions: 0, joins: 0/0}
$c+_r1ReU :: Expr -> Expr -> Expr
[GblId, Arity=2, Caf=NoCafRefs, Unf=OtherCon []]
$c+_r1ReU
  = \ (e2_a1R9v :: Expr) (e3_a1R9w :: Expr) ->
      break<2>(e2_a1R9v,e3_a1R9w) Other.EDSL.Add e2_a1R9v e3_a1R9w

Rec {
-- RHS size: {terms: 8, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fNumExpr [InlPrag=NOUSERINLINE CONLIKE] :: Num Expr
[GblId[DFunId]]
Other.EDSL.$fNumExpr
  = GHC.Num.C:Num
      @ Expr
      $c+_r1ReU
      $c-_r1ReT
      $c*_r1ReS
      $cnegate_r1ReV
      $cabs_r1ReR
      $csignum_r1ReQ
      $cfromInteger_r1Qc0

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cnegate_r1ReV :: Expr -> Expr
[GblId]
$cnegate_r1ReV = GHC.Num.$dmnegate @ Expr Other.EDSL.$fNumExpr
end Rec }

Rec {
-- RHS size: {terms: 101, types: 50, coercions: 0, joins: 0/0}
$cshowsPrec_r1ReW :: Int -> Expr -> ShowS
[GblId, Arity=2, Unf=OtherCon []]
$cshowsPrec_r1ReW
  = \ (a_a1Rba :: Int) (ds_d1Reh :: Expr) ->
      case ds_d1Reh of {
        Lit b1_a1Rbb ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Rba
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Lit "#))
               (showsPrec
                  @ Integer
                  GHC.Show.$fShowInteger
                  (ghc-prim-0.6.1:GHC.Types.I# 11#)
                  b1_a1Rbb));
        Add b1_a1Rbd b2_a1Rbe ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Rba
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Add "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1ReW (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Rbd)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1ReW (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Rbe))));
        Sub b1_a1Rbg b2_a1Rbh ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Rba
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Sub "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1ReW (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Rbg)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1ReW (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Rbh))));
        Mul b1_a1Rbj b2_a1Rbk ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Rba
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Mul "#))
               (. @ String
                  @ String
                  @ String
                  ($cshowsPrec_r1ReW (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Rbj)
                  (. @ String
                     @ String
                     @ String
                     GHC.Show.showSpace
                     ($cshowsPrec_r1ReW (ghc-prim-0.6.1:GHC.Types.I# 11#) b2_a1Rbk))));
        Abs b1_a1Rbm ->
          showParen
            (>=
               @ Int
               ghc-prim-0.6.1:GHC.Classes.$fOrdInt
               a_a1Rba
               (ghc-prim-0.6.1:GHC.Types.I# 11#))
            (. @ String
               @ String
               @ String
               (showString (ghc-prim-0.6.1:GHC.CString.unpackCString# "Abs "#))
               ($cshowsPrec_r1ReW (ghc-prim-0.6.1:GHC.Types.I# 11#) b1_a1Rbm))
      }
end Rec }

Rec {
-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fShowExpr [InlPrag=NOUSERINLINE CONLIKE] :: Show Expr
[GblId[DFunId]]
Other.EDSL.$fShowExpr
  = GHC.Show.C:Show
      @ Expr $cshowsPrec_r1ReW $cshow_r1ReY $cshowList_r1ReX

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshowList_r1ReX :: [Expr] -> ShowS
[GblId]
$cshowList_r1ReX
  = GHC.Show.$dmshowList @ Expr Other.EDSL.$fShowExpr

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$cshow_r1ReY :: Expr -> String
[GblId]
$cshow_r1ReY = GHC.Show.$dmshow @ Expr Other.EDSL.$fShowExpr
end Rec }

Rec {
-- RHS size: {terms: 62, types: 25, coercions: 0, joins: 0/0}
$c==_r1ReZ :: Expr -> Expr -> Bool
[GblId, Arity=2, Unf=OtherCon []]
$c==_r1ReZ
  = \ (ds_d1Red :: Expr) (ds1_d1Ree :: Expr) ->
      case ds_d1Red of {
        Lit a1_a1RaU ->
          case ds1_d1Ree of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Lit b1_a1RaV ->
              ==
                @ Integer
                integer-gmp-1.0.3.0:GHC.Integer.Type.$fEqInteger
                a1_a1RaU
                b1_a1RaV
          };
        Add a1_a1RaW a2_a1RaX ->
          case ds1_d1Ree of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Add b1_a1RaY b2_a1RaZ ->
              && ($c==_r1ReZ a1_a1RaW b1_a1RaY) ($c==_r1ReZ a2_a1RaX b2_a1RaZ)
          };
        Sub a1_a1Rb0 a2_a1Rb1 ->
          case ds1_d1Ree of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Sub b1_a1Rb2 b2_a1Rb3 ->
              && ($c==_r1ReZ a1_a1Rb0 b1_a1Rb2) ($c==_r1ReZ a2_a1Rb1 b2_a1Rb3)
          };
        Mul a1_a1Rb4 a2_a1Rb5 ->
          case ds1_d1Ree of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Mul b1_a1Rb6 b2_a1Rb7 ->
              && ($c==_r1ReZ a1_a1Rb4 b1_a1Rb6) ($c==_r1ReZ a2_a1Rb5 b2_a1Rb7)
          };
        Abs a1_a1Rb8 ->
          case ds1_d1Ree of {
            __DEFAULT -> ghc-prim-0.6.1:GHC.Types.False;
            Abs b1_a1Rb9 -> $c==_r1ReZ a1_a1Rb8 b1_a1Rb9
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
Other.EDSL.$fEqExpr [InlPrag=NOUSERINLINE CONLIKE] :: Eq Expr
[GblId[DFunId]]
Other.EDSL.$fEqExpr
  = ghc-prim-0.6.1:GHC.Classes.C:Eq @ Expr $c==_r1ReZ $c/=_r1Rf0

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$c/=_r1Rf0 :: Expr -> Expr -> Bool
[GblId]
$c/=_r1Rf0
  = ghc-prim-0.6.1:GHC.Classes.$dm/= @ Expr Other.EDSL.$fEqExpr
end Rec }

-- RHS size: {terms: 22, types: 7, coercions: 0, joins: 0/7}
e1 :: Expr
[GblId]
e1
  = break<1>()
    let {
      e2_a1R9v :: Expr
      [LclId]
      e2_a1R9v
        = let {
            n_a1R9u :: Integer
            [LclId, Unf=OtherCon []]
            n_a1R9u = 1 } in
          break<7>(n_a1R9u) Other.EDSL.Lit n_a1R9u } in
    let {
      e3_a1R9w :: Expr
      [LclId]
      e3_a1R9w
        = break<0>()
          let {
            e4_a1R9z :: Expr
            [LclId]
            e4_a1R9z
              = let {
                  n_a1R9u :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1R9u = 2 } in
                break<7>(n_a1R9u) Other.EDSL.Lit n_a1R9u } in
          let {
            e5_a1R9A :: Expr
            [LclId]
            e5_a1R9A
              = let {
                  n_a1R9u :: Integer
                  [LclId, Unf=OtherCon []]
                  n_a1R9u = 3 } in
                break<7>(n_a1R9u) Other.EDSL.Lit n_a1R9u } in
          break<4>(e4_a1R9z,e5_a1R9A) Other.EDSL.Mul e4_a1R9z e5_a1R9A } in
    break<2>(e2_a1R9v,e3_a1R9w) Other.EDSL.Add e2_a1R9v e3_a1R9w

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule1_r1Rf1 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule1_r1Rf1 = "fake_uid"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule2_r1Rf2 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule2_r1Rf2
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule1_r1Rf1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule3_r1Rf3 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule3_r1Rf3 = "Other.EDSL"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule4_r1Rf4 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$trModule4_r1Rf4
  = ghc-prim-0.6.1:GHC.Types.TrNameS $trModule3_r1Rf3

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$trModule :: ghc-prim-0.6.1:GHC.Types.Module
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
Other.EDSL.$trModule
  = ghc-prim-0.6.1:GHC.Types.Module $trModule2_r1Rf2 $trModule4_r1Rf4

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r1Rf5 :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep_r1Rf5
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      integer-gmp-1.0.3.0:GHC.Integer.Type.$tcInteger
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcExpr1_r1Rf6 :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr1_r1Rf6 = "Expr"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcExpr2_r1Rf7 :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tcExpr2_r1Rf7 = ghc-prim-0.6.1:GHC.Types.TrNameS $tcExpr1_r1Rf6

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tcExpr :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tcExpr
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8398727400959966989##
      12673861892423164487##
      Other.EDSL.$trModule
      $tcExpr2_r1Rf7
      0#
      ghc-prim-0.6.1:GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r1Rf8 :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep1_r1Rf8
  = ghc-prim-0.6.1:GHC.Types.KindRepTyConApp
      Other.EDSL.$tcExpr
      (ghc-prim-0.6.1:GHC.Types.[] @ ghc-prim-0.6.1:GHC.Types.KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r1Rf9 :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep2_r1Rf9
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep_r1Rf5 $krep1_r1Rf8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Lit1_r1Rfa :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit1_r1Rfa = "'Lit"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Lit2_r1Rfb :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Lit2_r1Rfb = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Lit1_r1Rfa

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Lit :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Lit
  = ghc-prim-0.6.1:GHC.Types.TyCon
      13337885009084958966##
      7363941603261238598##
      Other.EDSL.$trModule
      $tc'Lit2_r1Rfb
      0#
      $krep2_r1Rf9

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r1Rfc :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep3_r1Rfc
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1Rf8 $krep1_r1Rf8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Abs1_r1Rfd :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs1_r1Rfd = "'Abs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Abs2_r1Rfe :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Abs2_r1Rfe = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Abs1_r1Rfd

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Abs :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Abs
  = ghc-prim-0.6.1:GHC.Types.TyCon
      3843884384588183065##
      1162608799125344997##
      Other.EDSL.$trModule
      $tc'Abs2_r1Rfe
      0#
      $krep3_r1Rfc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r1Rff :: ghc-prim-0.6.1:GHC.Types.KindRep
[GblId, Unf=OtherCon []]
$krep4_r1Rff
  = ghc-prim-0.6.1:GHC.Types.KindRepFun $krep1_r1Rf8 $krep3_r1Rfc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Add1_r1Rfg :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add1_r1Rfg = "'Add"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Add2_r1Rfh :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Add2_r1Rfh = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Add1_r1Rfg

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Add :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Add
  = ghc-prim-0.6.1:GHC.Types.TyCon
      15452742132278570574##
      667697361562973212##
      Other.EDSL.$trModule
      $tc'Add2_r1Rfh
      0#
      $krep4_r1Rff

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Sub1_r1Rfi :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub1_r1Rfi = "'Sub"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Sub2_r1Rfj :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Sub2_r1Rfj = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Sub1_r1Rfi

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Sub :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Sub
  = ghc-prim-0.6.1:GHC.Types.TyCon
      8699310246118770061##
      14671028901294498827##
      Other.EDSL.$trModule
      $tc'Sub2_r1Rfj
      0#
      $krep4_r1Rff

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Mul1_r1Rfk :: ghc-prim-0.6.1:GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul1_r1Rfk = "'Mul"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Mul2_r1Rfl :: ghc-prim-0.6.1:GHC.Types.TrName
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
$tc'Mul2_r1Rfl = ghc-prim-0.6.1:GHC.Types.TrNameS $tc'Mul1_r1Rfk

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
Other.EDSL.$tc'Mul :: ghc-prim-0.6.1:GHC.Types.TyCon
[GblId, Unf=OtherCon []]
Other.EDSL.$tc'Mul
  = ghc-prim-0.6.1:GHC.Types.TyCon
      9170811447061351314##
      945847458421549353##
      Other.EDSL.$trModule
      $tc'Mul2_r1Rfl
      0#
      $krep4_r1Rff


