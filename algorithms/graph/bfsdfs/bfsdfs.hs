module Dfs where

-- way way shorter then most of other versions.

graphStr =
  "                                            \n\
   \ 0 - 1 - 3                                 \n\
   \     | / |                                 \n\
   \     2 - 5 - 7 - 8 - 9                     \n\
   \     |   |   |                             \n\
   \     4   6 - 10 - 11 - 12 - 13 - 14 - 15   \n"

graph = [[1], [0, 2, 3], [1, 3, 4, 5],  -- 0 - 2
         [1, 2, 5], [2], [2, 3, 6, 7],  -- 3 - 5
         [5, 10], [5, 8, 10], [7, 9], [8],  -- 6 - 9
         [6, 7, 11], [10, 12], [11, 13],  -- 10 - 12
         [12, 14], [13, 15], [14]         -- 13 - 15
         ]

treeStr =
  " tree        0                  \n\
  \           /   \\               \n\
  \          1     2               \n\
  \         / \\   / \\            \n\
  \        3   4 5   6             \n\
  \       / \\         \\          \n\
  \      7   8         11          \n\
  \     /               \\         \n\
  \    9                 12        \n\
  \   /                   \\       \n\
  \  10                    14      \n\
  \                                \n"

tree = [[1, 2], [0, 3, 4], [0, 5, 6], [1, 7, 8],
        [1], [2], [2, 11], [3, 9], [3], [7, 10],
        [9], [6, 12], [11, 13], [12]
        ]

type Graph = [[Int]]

bfs :: Graph -> Int -> [Int]
bfs = undefined

dfs :: Graph -> Int -> [Int]
dfs = undefined
