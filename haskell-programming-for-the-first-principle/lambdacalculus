LAMBDA CALCULUS in vim

alpha equivalence && beta reduction.

    (λxyz.xz(yz))(λmn.n)(λp.p)
<=> (λx.λy.λz.xz(yz))(λmn.n)(λp.p)
<=> (λy.λz.(λmn.n)z(yz))(λp.p)
<=> λz.(λmn.n)z((λp.p)z)
<=> λz.(λm.λn.n)z(z)
<=> λz.(λn.n)z
<=> λz.λn.z
<=> λz.z

beta normal form: end of the expression eval

expression eval is simplification.

combinator := lambda term with no free var.

some combinators:
    λx.x
    λxy.x
    λxyz.xz(yz)

Divergence: reducible lambda term that dose not reduce to the beta normal form

some divergent lambda terms:
    (λx.xx)(λx.xx)
    it has no free variable, so it is a combinator

I guess: divergent terms are useless except you want their side effects.

Exercise:
1.  (λabc.cba)zz(λwv.w)
<=> (λa.λb.λc.cba)zz(λwv.w)
<=> (λb.λc.cbz)z(λwv.w)
<=> (λc.czz)(λwv.w)
<=> (λwv.w)zz
<=> (λw.λv.w)zz
<=> (λv.z)z
<=> z

2.  (λx.λy.xyy)(λa.a)b
<=> (λy.(λa.a)yy)b
<=> (λa.a)bb
<=> bb

3.  (λy.y)(λx.xx)(λz.zq)
<=> (λx.xx)(λz.zq)
<=> (λz.zq)(λz.zq)
<=> (λa.aq)(λz.zq)
<=> (λz.zq)q
<=> qq

4.   (λz.z)(λz.zz)(λz.zy)
<=>  (λz.z)(λa.aa)(λb.by)
<=>  (λa.aa)(λb.by)
<=>  (λb.by)(λb.by)
<=>  (λb.by)y
<=>  yy

5.   (λx.λy.xyy)(λy.y)y
<=>  (λx.λz.xzz)(λa.a)y
<=>  (λz.(λa.a)zz)y
<=>  (λz.zz)y
<=>  yy

6.   (λa.aa)(λb.ba)c
<=>  (λb.ba)(λx.xa)c
<=>  (λb.(λx.xa)a)c
<=>  (λb.aa)c
<=>  ayc

7.   (λxyz.xz(yz))(λx.z)(λx.a)
<=>  (λx.λy.λz.xz(yz))(λx.z)(λx.a)
<=>  (λx.λy.λz.xz(yz))(λp.q)(λl.a)
<=>  (λy.λz.(λp.q)z(yz))(λl.a)
<=>  (λy.λz.qyz)(λl.a)
<=>  (λz.q(λl.a)z)
<=>  λz.qa
